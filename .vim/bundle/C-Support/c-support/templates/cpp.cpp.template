$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
$
== cpp.cin ==
std::cin >> <CURSOR>;
$
== cpp.cout ==
std::cout << <CURSOR> << std::endl;
== cpp.debug ==
std::cout<<"Run to \033[0;31m"<<__func__<<"\033[0m at \033[1;36m"<< __FILE__<<"\033[0m, line \033[0;34m"<< __LINE__<<"\033[0m"<< std::endl; <CURSOR>
$
== cpp.quickfix ==
std::cout<<__FILE__<<":"<<__LINE__<<": Run to "<<__func__<< std::endl; <CURSOR>
$
== cpp.cin-operator == insert ==
"<CURSOR>" >> <-CURSOR->
$
== cpp.cout-operator == insert ==
<< "<CURSOR>" <-CURSOR->
$
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.output-manipulator-boolalpha       == insert ==
<< std::boolalpha <CURSOR>
== cpp.output-manipulator-dec             == insert ==
<< std::dec <CURSOR>
== cpp.output-manipulator-endl            == insert ==
<< std::endl <CURSOR>
== cpp.output-manipulator-fixed           == insert ==
<< std::fixed <CURSOR>
== cpp.output-manipulator-flush           == insert ==
<< std::flush <CURSOR>
== cpp.output-manipulator-hex             == insert ==
<< std::hex <CURSOR>
== cpp.output-manipulator-internal        == insert ==
<< std::internal <CURSOR>
== cpp.output-manipulator-left            == insert ==
<< std::left <CURSOR>
== cpp.output-manipulator-oct             == insert ==
<< std::oct <CURSOR>
== cpp.output-manipulator-right           == insert ==
<< std::right <CURSOR>
== cpp.output-manipulator-scientific      == insert ==
<< std::scientific <CURSOR>
== cpp.output-manipulator-setbase         == insert ==
<< std::setbase(10<CURSOR>) 
== cpp.output-manipulator-setfill         == insert ==
<< std::setfill(<CURSOR>) 
== cpp.output-manipulator-setiosflag      == insert ==
<< std::setiosflags(<CURSOR>) 
== cpp.output-manipulator-setprecision    == insert ==
<< std::setprecision(6<CURSOR>) 
== cpp.output-manipulator-setw            == insert ==
<< std::setw(0<CURSOR>) 
== cpp.output-manipulator-showbase        == insert ==
<< std::showbase <CURSOR>
== cpp.output-manipulator-showpoint       == insert ==
<< std::showpoint <CURSOR>
== cpp.output-manipulator-showpos         == insert ==
<< std::showpos <CURSOR>
== cpp.output-manipulator-uppercase       == insert ==
<< std::uppercase <CURSOR>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.method-implementation ==
void<CURSOR>
|?CLASSNAME|::|?METHODNAME| ( <+argument list+> )
{
	return ;
}		// -----  end of method |CLASSNAME|::|METHODNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.accessor-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  get_|?ATTRIBUTE|
//----------------------------------------------------------------------------
inline |?RETURNTYPE|
|CLASSNAME|::get_|ATTRIBUTE| (  ) const
{
	return |ATTRIBUTE|;
}		// -----  end of method |CLASSNAME|::get_|ATTRIBUTE|  -----

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  set_|ATTRIBUTE|
//----------------------------------------------------------------------------
inline void
|CLASSNAME|::set_|ATTRIBUTE| ( |RETURNTYPE| value )
{
	|ATTRIBUTE|	= value;
	return ;
}		// -----  end of method |CLASSNAME|::set_|ATTRIBUTE|  -----
<CURSOR>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-definition ==
// ===========================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// ===========================================================================
class |CLASSNAME|
{
    public:

	// ====================  LIFECYCLE     ===============================
	|CLASSNAME| ();                             // constructor

	// ====================  ACCESSORS     ===============================

	// ====================  MUTATORS      ===============================

	// ====================  OPERATORS     ===============================

    protected:
	// ====================  DATA MEMBERS  ===============================

    private:
	// ====================  DATA MEMBERS  ===============================

}; // -----  end of class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//----------------------------------------------------------------------------
|CLASSNAME|::|CLASSNAME| ()
{<CURSOR>
}  // -----  end of method |CLASSNAME|::|CLASSNAME|  (constructor)  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-definition ==
// ===========================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// ===========================================================================
class |CLASSNAME|
{
    public:

	// ====================  LIFECYCLE     ===============================
	|CLASSNAME| ();                             // constructor
	|CLASSNAME| ( const |CLASSNAME| &other );   // copy constructor
	~|CLASSNAME| ();                            // destructor

	// ====================  ACCESSORS     ===============================

	// ====================  MUTATORS      ===============================

	// ====================  OPERATORS     ===============================

	|CLASSNAME|& operator = ( const |CLASSNAME| &other ); // assignment operator

	// ====================  DATA MEMBERS  ===============================

    protected:
    // ====================  METHODS       ===============================

    // ====================  DATA MEMBERS  ===============================

    private:
    // ====================  METHODS       ===============================

	// ====================  DATA MEMBERS  ===============================

}; // -----  end of class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//----------------------------------------------------------------------------
|CLASSNAME|::|CLASSNAME| ()
{<CURSOR>
}  // -----  end of method |CLASSNAME|::|CLASSNAME|  (constructor)  -----

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  copy constructor
//----------------------------------------------------------------------------
|CLASSNAME|::|CLASSNAME| ( const |CLASSNAME| &other )
{
}  // -----  end of method |CLASSNAME|::|CLASSNAME|  (copy constructor)  -----

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  ~|CLASSNAME|
// Description:  destructor
//----------------------------------------------------------------------------
|CLASSNAME|::~|CLASSNAME| ()
{
}  // -----  end of method |CLASSNAME|::-|CLASSNAME|  (destructor)  -----

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  operator =
// Description:  assignment operator
//----------------------------------------------------------------------------
    |CLASSNAME|&
|CLASSNAME|::operator = ( const |CLASSNAME| &other )
{
    if ( this != &other ) {
    }
    return *this;
}  // -----  end of method |CLASSNAME|::operator =  (assignment operator)  ---

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.error-class ==
// ===========================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// ===========================================================================
class |CLASSNAME|
{
    public:     |CLASSNAME| ( string msg = "|CLASSNAME|" ):message(msg)  { }
		virtual ~|CLASSNAME| ( )  { }
		virtual string what ( ) const throw ( )  { return message; }
    protected:  string  message;
}; // ----------  end of class |CLASSNAME|  ----------

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-method-implementation ==
    template < class T >
void<CURSOR> |?CLASSNAME|<T>::|?METHODNAME| ( <+argument list+> )
{
	return ;
}		// -----  end of method |CLASSNAME|<T>::|METHODNAME|  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-accessor-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  get_|?ATTRIBUTE|
//----------------------------------------------------------------------------
template < class T >
inline |?RETURNTYPE| |CLASSNAME|<T>::get_|ATTRIBUTE| (  ) const
{
    return |ATTRIBUTE|;
}		// -----  end of method |CLASSNAME|<T>::get_|ATTRIBUTE|  -----

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  set_|ATTRIBUTE|
//----------------------------------------------------------------------------
template < class T >
inline void |CLASSNAME|<T>::set_|ATTRIBUTE| ( |RETURNTYPE| value )
{
    |ATTRIBUTE|	= value;
    return ;
}		// -----  end of method |CLASSNAME|<T>::set_|ATTRIBUTE|  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-definition ==
// ===========================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// ===========================================================================

template < class T >
class |CLASSNAME|
{
    public:

	// ====================  LIFECYCLE     ===============================
	|CLASSNAME| ();                             // constructor

	// ====================  ACCESSORS     ===============================

	// ====================  MUTATORS      ===============================

	// ====================  OPERATORS     ===============================

    protected:
	// ====================  DATA MEMBERS  ===============================

    private:
	// ====================  DATA MEMBERS  ===============================

}; // -----  end of template class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//----------------------------------------------------------------------------
template < class T >
|CLASSNAME| <T>:: |CLASSNAME| ()
{<CURSOR>
}  // -----  end of constructor of template class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-definition ==
// ===========================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// ===========================================================================

template < class T >
class |CLASSNAME|
{
    public:

	// ====================  LIFECYCLE     ===============================
	|CLASSNAME| ();                           // constructor
	|CLASSNAME| ( const |CLASSNAME| &other ); // copy constructor
	~|CLASSNAME| ();                          // destructor

	// ====================  ACCESSORS     ===============================

	// ====================  MUTATORS      ===============================

	// ====================  OPERATORS     ===============================

	|CLASSNAME|& operator = ( const |CLASSNAME| &other ); // assignment operator

	// ====================  DATA MEMBERS  ===============================

    protected:
    // ====================  METHODS       ===============================

	// ====================  DATA MEMBERS  ===============================

    private:
    // ====================  METHODS       ===============================

	// ====================  DATA MEMBERS  ===============================

}; // -----  end of template class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-implementation ==
//----------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//----------------------------------------------------------------------------
template < class T >
|CLASSNAME|< T >::|CLASSNAME| ()
{<CURSOR>
}  // ----------  end of constructor of template class |CLASSNAME|  ---------- 

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  copy constructor
//----------------------------------------------------------------------------
template < class T >
|CLASSNAME|< T >::|CLASSNAME| ( const |CLASSNAME| &other )
{
}  // --------  end of copy constructor of template class |CLASSNAME|  -------- 

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  ~|CLASSNAME|
// Description:  destructor
//----------------------------------------------------------------------------
template < class T >
|CLASSNAME|< T >::~|CLASSNAME| ()
{
}  // ----------  end of destructor of template class |CLASSNAME|  ---------- 

//----------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  operator =
// Description:  assignment operator
//----------------------------------------------------------------------------
template < class T >
|CLASSNAME|< T >& |CLASSNAME|< T >::operator = ( const |CLASSNAME| &other )
{
  if ( this != &other ) {
  }
  return *this;
}  // ----------  end of assignment operator of template class |CLASSNAME|  ---------- 

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-function ==
template <class T>
void<CURSOR> |?TEMPALTE_FUNCTION_NAME| ( <+argument list+> )
{
	return ;
}		// -----  end of template function |?TEMPALTE_FUNCTION_NAME| - 
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-in ==
ostream &
operator << ( ostream & os, const |?CLASSNAME| & obj )
{
	os << obj.<CURSOR> ;
	return os;
}		// -----  end of function operator <<  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-out ==
istream &
operator >> ( istream & is, |?CLASSNAME| & obj )
{
	is >> obj.<CURSOR> ;
	return is;
}		// -----  end of function operator >>  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.try-catch ==
try {
<SPLIT>}
catch ( const <CURSOR> &ExceptObj ) {		// handle exception:
}
catch (...) {		// handle exception: unspecified
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch ==
catch ( const <CURSOR> &ExceptObj ) {		// handle exception:
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch-points ==
catch (...) {		// handle exception: unspecified
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.extern ==
extern "C" {<CURSOR>
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-input-file ==
string    ifs_file_name = "<CURSOR>";                 // input  file name
ifstream  ifs;                                // create ifstream object

ifs.open ( ifs_file_name.c_str() );           // open ifstream
if (!ifs) {
	cerr << "\nERROR : failed to open input  file " << ifs_file_name << endl;
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ifs.close ();                                 // close ifstream
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-output-file ==
string    ofs_file_name = "<CURSOR>";         // input  file name
ofstream  ofs;                                // create ofstream object

ofs.open ( ofs_file_name.c_str() );           // open ofstream
if (!ofs) {
	cerr << "\nERROR : failed to open output file " << ofs_file_name << endl;
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ofs.close ();                                 // close ofstream
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.namespace-std ==
using namespace std;
== cpp.namespace ==
using namespace |?NAMESPACE|;
== cpp.namespace-block ==
namespace |?NAMESPACE| {<CURSOR>
<SPLIT>}		// -----  end of namespace |NAMESPACE|  -----
== cpp.namespace-alias ==
namespace |?NAMESPACE_ALIAS|	= {-original namespace name-};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.rtti-typeid == insert ==
typeid(<CURSOR><SPLIT>)<++>
$
== cpp.rtti-static-cast == insert ==
static_cast<<CURSOR>>(<-SPLIT->)<++>
$
== cpp.rtti-const-cast == insert ==
const_cast<<CURSOR>>(<-SPLIT->)<++>
$
== cpp.rtti-reinterpret-cast == insert ==
reinterpret_cast<<CURSOR>>(<-SPLIT->)<++>
$
== cpp.rtti-dynamic-cast == insert ==
dynamic_cast<<CURSOR>>(<-SPLIT->)<++>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDAnalyzer-definition  ==
/**\class |?CLASSNAME|

 Description: <+one line class summary+>

 Implementation:
     <+Notes on implementation+>
*/

#ifndef  __EDAnalyzer_|CLASSNAME:u|_INC__
#define  __EDAnalyzer_|CLASSNAME:u|_INC__

// system include files
#include <memory>
#include <string>
#include <vector>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

//
// class declaration
//

class |CLASSNAME| : public edm::EDAnalyzer {
   public:
      explicit |CLASSNAME|(const edm::ParameterSet&);
      ~|CLASSNAME|();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;

      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//define this as a plug-in
DEFINE_FWK_MODULE(|CLASSNAME|);
#endif   // ----- #ifndef __EDAnalyzer_|CLASSNAME:u|_INC__  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDAnalyzer-inplementation  ==
|CMSSW|

//
// constructors and destructor
//
|?CLASSNAME|::|CLASSNAME|(const edm::ParameterSet& iConfig)
{
   //now do what ever initialization is needed

}

|CLASSNAME|::~|CLASSNAME|()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
|CLASSNAME|::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;



#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
}


// ------------ method called once each job just before starting event loop  ------------
void 
|CLASSNAME|::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
|CLASSNAME|::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
void 
|CLASSNAME|::beginRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
|CLASSNAME|::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
|CLASSNAME|::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
|CLASSNAME|::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
|CLASSNAME|::fillDescriptions(edm::ConfigurationDescriptions& descriptions) 
{
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDFilter-definition  ==
/**\class |?CLASSNAME|

 Description: <+one line class summary+>

 Implementation:
     <+Notes on implementation+>
*/

#ifndef  __EDFilter_|CLASSNAME:u|_INC__
#define  __EDFilter_|CLASSNAME:u|_INC__

// system include files
#include <memory>
#include <string>
#include <vector>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDFilter.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

//
// class declaration
//

class |CLASSNAME| : public edm::EDFilter {
   public:
      explicit |CLASSNAME|(const edm::ParameterSet&);
      ~|CLASSNAME|();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual bool filter(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      
      virtual bool beginRun(edm::Run&, edm::EventSetup const&);
      virtual bool endRun(edm::Run&, edm::EventSetup const&);
      virtual bool beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual bool endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);

      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//define this as a plug-in
DEFINE_FWK_MODULE(|CLASSNAME|);
#endif   // ----- #ifndef __EDFilter_|CLASSNAME:u|_INC__  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDFilter-inplementation  ==
|CMSSW|

//
// constructors and destructor
//
|CLASSNAME|::|CLASSNAME|(const edm::ParameterSet& iConfig)
{
   //now do what ever initialization is needed

}


|CLASSNAME|::~|CLASSNAME|()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called on each new Event  ------------
bool
|CLASSNAME|::filter(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif

#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
   return true;
}

// ------------ method called once each job just before starting event loop  ------------
void 
|CLASSNAME|::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
|CLASSNAME|::endJob() {
}

// ------------ method called when starting to processes a run  ------------
bool 
|CLASSNAME|::beginRun(edm::Run&, edm::EventSetup const&)
{ 
  return true;
}

// ------------ method called when ending the processing of a run  ------------
bool 
|CLASSNAME|::endRun(edm::Run&, edm::EventSetup const&)
{
  return true;
}

// ------------ method called when starting to processes a luminosity block  ------------
bool 
|CLASSNAME|::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
  return true;
}

// ------------ method called when ending the processing of a luminosity block  ------------
bool 
|CLASSNAME|::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
  return true;
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
|CLASSNAME|::fillDescriptions(edm::ConfigurationDescriptions& descriptions) 
{
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDProducer-definition  ==
/**\class |?CLASSNAME|

 Description: <+one line class summary+>

 Implementation:
     <+Notes on implementation+>
*/

#ifndef  __EDProducer_|CLASSNAME:u|_INC__
#define  __EDProducer_|CLASSNAME:u|_INC__

// system include files
#include <memory>
#include <string>
#include <vector>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

//
// class declaration
//

class |CLASSNAME| : public edm::EDProducer {
   public:
      explicit |CLASSNAME|(const edm::ParameterSet&);
      ~|CLASSNAME|();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      
      virtual void beginRun(edm::Run&, edm::EventSetup const&);
      virtual void endRun(edm::Run&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);

      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//define this as a plug-in
DEFINE_FWK_MODULE(|CLASSNAME|);
#endif   // ----- #ifndef __EDProducer_|CLASSNAME:u|_INC__  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.EDProducer-inplementation  ==
|CMSSW|

//
// constructors and destructor
//
|?CLASSNAME|::|CLASSNAME|(const edm::ParameterSet& iConfig)
{
   //register your products
/* Examples
   produces<ExampleData2>();

   //if do put with a label
   produces<ExampleData2>("label");
 
   //if you want to put into the Run
   produces<ExampleData2,InRun>();
*/
   //now do what ever other initialization is needed
  
}


|CLASSNAME|::~|CLASSNAME|()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
|CLASSNAME|::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
/* This is an event example
   //Read 'ExampleData' from the Event
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);

   //Use the ExampleData to create an ExampleData2 which 
   // is put into the Event
   std::auto_ptr<ExampleData2> pOut(new ExampleData2(*pIn));
   iEvent.put(pOut);
*/

/* this is an EventSetup example
   //Read SetupData from the SetupRecord in the EventSetup
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
*/
 
}

// ------------ method called once each job just before starting event loop  ------------
void 
|CLASSNAME|::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
|CLASSNAME|::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
|CLASSNAME|::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
|CLASSNAME|::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
|CLASSNAME|::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
|CLASSNAME|::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
|CLASSNAME|::fillDescriptions(edm::ConfigurationDescriptions& descriptions) 
{
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

